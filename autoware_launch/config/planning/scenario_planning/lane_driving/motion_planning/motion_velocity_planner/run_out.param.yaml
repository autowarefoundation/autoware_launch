/**:
  ros__parameters:
    run_out:  # module to stop or slowdown before sudden collisions with obstacles
      collision:
        time_margin: 0.5  # [s] extra time margin used to determine collisions
        time_overlap_tolerance: 0.1  # [s] when calculating overlap time intervals, intervals are grouped if they are separated by less than this tolerance value
        same_direction_angle_threshold: 0.5  # [rad] threshold to determine if a collision is going in the same direction as the ego trajectory
        opposite_direction_angle_threshold: 0.5  # [rad] threshold around pi to determine if a collision is going in a direction opposite to the ego trajectory

        ignore_conditions:  # ignore collisions in some conditions
          if_ego_arrives_first: # collision where ego arrives first
            enable: true
            margin: # margins to decide if we can ignore the collision. linearly interpolated based on the collision time and the provided mappings
              ego_enter_times: [0.0, 3.0]  # [s] predicted times when ego starts overlapping the path of the object
              time_margins: [0.0, 6.0] # [s] margin values used such that ego needs to enter the overlap before the object with this much margin to decide to ignore the collision
            max_overlap_duration: 2.0  # [s] the collision is not ignored if ego is predicted to stay on the object's path for longer than this duration
          if_ego_arrives_first_and_cannot_stop: # collision where ego arrives first (margins not considered) and cannot stop before the collision
            enable: true
            deceleration_limit: 5.0 # [m/s²] deceleration used to determine if ego can stop before a collision

      slowdown:  # comfortable slowdown when detecting a collision
        on_time_buffer: 0.1   # [s] successive collision detection time required to start the slowdown decision
        off_time_buffer: 0.5  # [s] successive non-collision detection time required to remove the slowdown decision
        distance_buffer: 2.0  # [m] longitudinal distance between the collision and the slowdown positions
        deceleration_limit: 4.0  # [m/s²] maximum deceleration that can be applied by the preventive slowdown

      stop:  # emergency stop when detecting a collision
        on_time_buffer: 0.5   # [s] successive collision detection time required to start the stopping decision
        off_time_buffer: 0.5  # [s] successive non-collision detection time required to remove a stopping decision
        distance_buffer: 2.0  # [m] longitudinal safety distance to keep between ego and the collision position
        deceleration_limit: 5.0  # [m/s²] if a stop causes a deceleration higher than this limit, an ERROR diagnostic is published
        keep_condition:  # keep the stop decision if we still find any collision with the object within some time+distance range
          time: 5.0  # [s] time along the ego trajectory
          distance: 5.0  # [m] distance along the ego trajectory

      ego:
        # additional margins to calculate the ego footprint used for collision detection
        lateral_margin: 0.0 # [m] extra lateral margin
        longitudinal_margin: 0.0 # [m] extra longitudinal margin

      objects:
        target_labels: ["PEDESTRIAN", "BICYCLE", "MOTORCYCLE"]
        # for each target labels we can specify the following parameters
        DEFAULT:
          ignore:  # options to ignore some objects
            if_stopped: false # if true, object with a velocity bellow the threshold are ignored
            stopped_velocity_threshold: 0.5  # [m/s]
            if_on_ego_trajectory: true  # if true, object located on the ego trajectory footprint are ignored
            if_behind_ego: true  # if true, objects located behind the ego vehicles are ignored
            polygon_types: ["NONE"]  # types of polygons in the vector map used to ignore objects
            lanelet_subtypes: ["NONE"]  # subtypes of lanelets in the vector map used to ignore objects
          ignore_collisions:  # option to ignore some collisions with the object
            polygon_types: ["NONE"]  # types of polygons in the vector map where collisions are ignored
            lanelet_subtypes: ["NONE"]  # subtypes of lanelets in the vector map used where collisions are ignored
          confidence_filtering:
            threshold: 0.0  # [-] only use predicted paths with a higher confidence value than this threshold
            only_use_highest: true  # if true, only the path(s) with the highest confidence are used
          cut_predicted_paths:  # options to cut predicted paths of dynamic objects
            if_crossing_ego_from_behind: true # if true, cut after crossing the ego vehicle
            polygon_types: ["NONE"]  # types of polygons in the vector map used to cut predicted paths
            linestring_types: ["guard_rail"]  # types of linestrings in the vector map used to cut predicted paths
            lanelet_subtypes: ["NONE"]  # subtypes of lanelets in the vector map used to cut predicted paths
        PEDESTRIAN:
          ignore:
            lanelet_subtypes: ["crosswalk", "walkway"]
          cut_predicted_paths:
            lanelet_subtypes: ["crosswalk", "walkway"]
        BICYCLE:
          ignore_collisions:
            lanelet_subtypes: ["crosswalk", "walkway"]
      debug:
        object_label: "PEDESTRIAN"  # debug markers specific to each object classification labels will only be published for this one
