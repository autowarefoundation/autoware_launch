/**:
  ros__parameters:
    use_pointcloud: false # use pointcloud as obstacle check
    use_dynamic_object: true # use dynamic object as obstacle check
    collision_distance: 0.1 # Distance at which an object is determined to have collided with ego [m]
    nearby_filter_radius: 5.0 # Radius to filter nearby objects [m]
    keep_ignoring_time: 10.0 # Time to keep filtering objects that first appeared in the vicinity
    nearby_object_type_filters: # Classes subject to filtering for objects first appearing in the vicinity
      filter_car: false
      filter_truck: false
      filter_bus: false
      filter_trailer: false
      filter_bicycle: false
      filter_motorcycle: false
      filter_pedestrian: false
      filter_unknown: true
    ignore_behind_rear_axle: true  # If true, collisions detected behind the rear axle of the ego vehicle are ignored
    time_buffer:  # buffer to start or stop publishing the ERROR diagnostic
      on_duration: 0.2  # [s] minimum consecutive detection time before triggering the diagnostic
      off_duration: 5.0  # [s] minimum consecutive time without collision detection (including the hysteresis) before releasing the diagnostic
      off_distance_hysteresis: 1.0  # [m] extra distance used to detect collisions once the diagnostic is triggered
