<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Common arguments -->
  <arg name="use_sim_time" default="true" description="Use simulation time"/>
  <arg name="map_path" description="Map directory path (kept for CLI compatibility)"/>
  <arg name="vehicle_model" default="sample_vehicle" description="Vehicle model name"/>
  <arg name="sensor_model" default="carla_sensor_kit" description="Sensor model name"/>
  <arg name="data_path" default="$(env HOME)/autoware_data" description="Data directory path"/>

  <!-- CARLA connection -->
  <arg name="simulator_host" default="localhost"/>
  <arg name="simulator_port" default="2000"/>
  <arg name="sync_mode" default="True"/>
  <arg name="fixed_delta_seconds" default="0.05"/>
  <arg name="use_traffic_manager" default="False"/>
  <arg name="carla_map" default="Town01"/>
  <arg name="ego_vehicle_role_name" default="ego_vehicle"/>
  <arg name="vehicle_type" default="vehicle.toyota.prius"/>
  <arg name="spawn_point" default="None"/>
  <arg name="sensor_mapping_file" default="$(find-pkg-share autoware_carla_interface)/config/sensor_mapping.yaml"/>

  <!-- VAD configuration -->
  <arg name="vad_log_level" default="info"/>
  <arg name="vad_model_path" default="$(env HOME)/autoware_data/vad"/>

  <!-- RViz configuration -->
  <arg name="rviz" default="true" description="launch rviz"/>
  <arg name="rviz_config" default="$(find-pkg-share autoware_launch)/rviz/autoware.rviz" description="rviz config path"/>
  <arg name="rviz_respawn" default="true" description="respawn rviz on crash"/>

  <!-- Load global parameters (vehicle info, sim time) -->
  <group scoped="false">
    <include file="$(find-pkg-share autoware_global_parameter_loader)/launch/global_params.launch.py">
      <arg name="use_sim_time" value="$(var use_sim_time)"/>
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
    </include>
  </group>

  <!-- Vehicle (for robot_description and TF tree in RViz) -->
  <group>
    <include file="$(find-pkg-share tier4_vehicle_launch)/launch/vehicle.launch.xml">
      <arg name="vehicle_model" value="$(var vehicle_model)"/>
      <arg name="sensor_model" value="$(var sensor_model)"/>
      <arg name="launch_vehicle_interface" value="false"/>
    </include>
  </group>

  <!-- Map (for lanelet2 and pointcloud in RViz) -->
  <group>
    <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_map_component.launch.xml">
      <arg name="map_path" value="$(var map_path)"/>
      <arg name="lanelet2_map_file" value="lanelet2_map.osm"/>
      <arg name="pointcloud_map_file" value="pointcloud_map.pcd"/>
    </include>
  </group>

  <!-- CARLA interface -->
  <group scoped="false">
    <include file="$(find-pkg-share autoware_carla_interface)/autoware_carla_interface.launch.xml">
      <arg name="host" value="$(var simulator_host)"/>
      <arg name="port" value="$(var simulator_port)"/>
      <arg name="sync_mode" value="$(var sync_mode)"/>
      <arg name="fixed_delta_seconds" value="$(var fixed_delta_seconds)"/>
      <arg name="carla_map" value="$(var carla_map)"/>
      <arg name="ego_vehicle_role_name" value="$(var ego_vehicle_role_name)"/>
      <arg name="vehicle_type" value="$(var vehicle_type)"/>
      <arg name="spawn_point" value="$(var spawn_point)"/>
      <arg name="use_traffic_manager" value="$(var use_traffic_manager)"/>
      <arg name="sensor_mapping_file" value="$(var sensor_mapping_file)"/>
    </include>
  </group>

  <!-- Convert vehicle velocity report to twist -->
  <include file="$(find-pkg-share autoware_vehicle_velocity_converter)/launch/vehicle_velocity_converter.launch.xml">
    <arg name="input_vehicle_velocity_topic" value="/vehicle/status/velocity_status"/>
    <arg name="output_twist_with_covariance" value="/sensing/vehicle_velocity_converter/twist_with_covariance"/>
  </include>

  <!-- Publish Odometry (localization/kinematic_state) from CARLA pose + twist -->
  <node pkg="autoware_tensorrt_vad" exec="carla_state_publisher" name="carla_state_publisher" output="screen">
    <param name="use_sim_time" value="$(var use_sim_time)"/>
    <param name="frame_id" value="map"/>
    <param name="child_frame_id" value="base_link"/>
    <param name="publish_tf" value="true"/>
    <param name="max_time_diff_sec" value="0.3"/>
    <remap from="~/input/pose_with_covariance" to="/sensing/gnss/pose_with_covariance"/>
    <remap from="~/input/twist_with_covariance" to="/sensing/vehicle_velocity_converter/twist_with_covariance"/>
    <remap from="~/output/odometry" to="/localization/kinematic_state"/>
  </node>

  <!-- Derive acceleration from twist -->
  <node pkg="autoware_twist2accel" exec="autoware_twist2accel_node" name="vad_twist2accel" output="screen">
    <param name="use_sim_time" value="$(var use_sim_time)"/>
    <param from="$(find-pkg-share autoware_twist2accel)/config/twist2accel.param.yaml"/>
    <param name="use_odom" value="false"/>
    <param name="accel_lowpass_gain" value="0.5"/>
    <remap from="input/twist" to="/sensing/vehicle_velocity_converter/twist_with_covariance"/>
    <remap from="output/accel" to="/localization/acceleration"/>
  </node>

  <!-- Autoware API server for RViz button support -->
  <include file="$(find-pkg-share autoware_default_adapi_universe)/launch/default_adapi.launch.py">
    <arg name="config" value="$(find-pkg-share autoware_default_adapi_universe)/config/default_adapi.param.yaml"/>
  </include>

  <!-- Operation mode transition manager -->
  <include file="$(find-pkg-share autoware_operation_mode_transition_manager)/launch/operation_mode_transition_manager.launch.xml">
    <arg name="operation_mode_transition_manager_param" value="$(find-pkg-share autoware_launch)/config/control/operation_mode_transition_manager/operation_mode_transition_manager.param.yaml"/>
    <arg name="vehicle_info_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
  </include>

  <!-- Autonomous mode availability checker -->
  <include file="$(find-pkg-share autoware_operation_mode_transition_manager)/launch/autonomous_mode_transition_flag_node.launch.xml">
    <arg name="operation_mode_transition_manager_param" value="$(find-pkg-share autoware_launch)/config/control/operation_mode_transition_manager/operation_mode_transition_manager.param.yaml"/>
    <arg name="vehicle_info_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
  </include>

  <!-- Launch VAD perception/planning -->
  <group>
    <include file="$(find-pkg-share autoware_tensorrt_vad)/launch/vad_carla_tier4.launch.xml">
      <arg name="log_level" value="$(var vad_log_level)"/>
      <arg name="model_path" value="$(var vad_model_path)"/>
      <arg name="output/trajectory" value="/planning/trajectory"/>
      <arg name="rviz" value="false"/>
    </include>
  </group>

  <!-- RViz -->
  <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_config)" if="$(var rviz)" respawn="$(var rviz_respawn)">
    <param name="use_sim_time" value="$(var use_sim_time)"/>
  </node>

  <!-- Minimal control: trajectory follower only -->
  <node_container pkg="rclcpp_components" exec="component_container_mt" name="vad_control_container" namespace="" output="screen">
    <composable_node
      pkg="autoware_trajectory_follower_node"
      plugin="autoware::motion::control::trajectory_follower_node::Controller"
      name="trajectory_follower">
      <param name="use_sim_time" value="$(var use_sim_time)"/>
      <param name="lateral_controller_mode" value="mpc"/>
      <param name="longitudinal_controller_mode" value="pid"/>
      <param from="$(find-pkg-share autoware_launch)/config/control/trajectory_follower/trajectory_follower_node.param.yaml"/>
      <param from="$(find-pkg-share autoware_launch)/config/control/trajectory_follower/lateral/mpc.param.yaml"/>
      <param from="$(find-pkg-share autoware_launch)/config/control/trajectory_follower/longitudinal/pid.param.yaml"/>
      <param from="$(find-pkg-share autoware_launch)/config/control/common/nearest_search.param.yaml"/>
      <param from="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
      <remap from="~/input/reference_trajectory" to="/planning/trajectory"/>
      <remap from="~/input/current_odometry" to="/localization/kinematic_state"/>
      <remap from="~/input/current_accel" to="/localization/acceleration"/>
      <remap from="~/input/current_steering" to="/vehicle/status/steering_status"/>
      <remap from="~/input/current_operation_mode" to="/system/operation_mode/state"/>
      <remap from="~/output/control_cmd" to="/trajectory_follower/control_cmd"/>
      <remap from="~/output/predicted_trajectory" to="/control/trajectory_follower/predicted_trajectory"/>
      <remap from="~/output/lateral_diagnostic" to="/control/trajectory_follower/lateral/diagnostic"/>
      <remap from="~/output/longitudinal_diagnostic" to="/control/trajectory_follower/longitudinal/diagnostic"/>
    </composable_node>
  </node_container>

  <!-- Vehicle command gate for operation mode management -->
  <!-- Note: Emergency handling disabled for E2E VAD simulation (no MRM system) -->
  <node pkg="autoware_vehicle_cmd_gate" exec="vehicle_cmd_gate_exe" name="vehicle_cmd_gate" output="screen">
    <param name="use_emergency_handling" value="false"/>
    <param name="check_external_emergency_heartbeat" value="false"/>
    <param from="$(find-pkg-share autoware_launch)/config/control/vehicle_cmd_gate/vehicle_cmd_gate.param.yaml"/>
    <param from="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>

    <remap from="input/steering" to="/vehicle/status/steering_status"/>
    <remap from="input/auto/control_cmd" to="/trajectory_follower/control_cmd"/>
    <remap from="input/auto/turn_indicators_cmd" to="/planning/turn_indicators_cmd"/>
    <remap from="input/auto/hazard_lights_cmd" to="/planning/hazard_lights_cmd"/>
    <remap from="input/auto/gear_cmd" to="/control/shift_decider/gear_cmd"/>
    <remap from="input/gate_mode" to="/control/gate_mode_cmd"/>
    <remap from="output/control_cmd" to="/control/command/control_cmd"/>
    <remap from="output/gear_cmd" to="/control/command/gear_cmd"/>
    <remap from="output/turn_indicators_cmd" to="/control/command/turn_indicators_cmd"/>
    <remap from="output/hazard_lights_cmd" to="/control/command/hazard_lights_cmd"/>
  </node>
</launch>
